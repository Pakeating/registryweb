---
import Navbar from '../components/Navbar.astro';
import FeedbackIcon from '../components/FeedbackIcon.astro';
import '../styles/global.css';

const manifest = {
  name: 'Registro de Comidas',
  short_name: 'Comidas',
  description: 'Una app para registrar comidas y enviarlas a Notion.',
  start_url: '/',
  display: 'standalone',
  scope: '/',
  theme_color: '#F5F5F4',
  background_color: '#F5F5F4',
  icons: [
    { src: '/icons/icon192.webp', sizes: '192x192', type: 'image/webp' },
    { src: '/icons/icon500.webp', sizes: '500x500', type: 'image/webp', purpose: 'any maskable' }
  ]
};

const siteUrl = Astro.url.origin;
const manifestWithAbsoluteUrls = {
  ...manifest,
  start_url: `${siteUrl}${manifest.start_url}`,
  scope: `${siteUrl}${manifest.scope}`,
  icons: manifest.icons.map(icon => ({ ...icon, src: `${siteUrl}${icon.src}` }))
};

const encodedManifest = JSON.stringify(manifestWithAbsoluteUrls).replace(/#/g, '%23');
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/webp" href="/favicon.webp" />
    <link rel="apple-touch-icon" href="/icons/icon192.webp">
		<meta name="generator" content={Astro.generator} />
		<title>RegistryWeb</title>
    <link rel="manifest" href={`data:application/manifest+json,${encodedManifest}`} />
    <meta name="theme-color" content={manifest.theme_color} />
	</head>
	<body>
    <Navbar />
		<slot />
    <FeedbackIcon />

    <script>
        // --- IMPORTACIONES (DEBEN ESTAR AL PRINCIPIO) ---
        import { auth } from '../firebase/config.ts';
        import { onAuthStateChanged } from "firebase/auth";

        // --- GATE DE AUTENTICACIÓN ---
        if (window.location.pathname !== '/loginPage') {
            onAuthStateChanged(auth, (user) => {
                if (!user) {
                    window.location.href = '/loginPage';
                }
            });
        }

        // --- LÓGICA DEL SERVICE WORKER Y OTROS ---
        window.addEventListener('load', () => {
            // 1. Solicitud de Permiso de Notificaciones
            if ('Notification' in window) {
              Notification.requestPermission().then(permission => {
                if (permission === 'granted') {
                  console.log('[Layout] Permiso para notificaciones concedido.');
                } else {
                  console.warn('[Layout] Permiso para notificaciones denegado.');
                }
              });
            }

            // 2. Registro del Service Worker
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/sw.js')
                    .then(reg => console.log('[Layout] Service Worker registrado.', reg))
                    .catch(err => console.error('[Layout] Error al registrar Service Worker:', err));
            }

            // 3. Disparador de Sincronización en Carga de Página
            if ('serviceWorker' in navigator && 'SyncManager' in window) {
                navigator.serviceWorker.ready.then(sw => {
                    sw.sync.register('sync-pending-meals')
                        .then(() => console.log('[Layout] Sincronización de fondo registrada al cargar la página.'))
                        .catch(err => console.error('[Layout] No se pudo registrar la sincronización:', err));
                });
            }
        });
        
        // --- HEALTH CHECK DEL BACKEND ---
        (async () => {
            try {
                const response = await fetch('/api/proxy');
                if (!response.ok) {
                    console.warn(`Backend health check failed with status: ${response.status}`);
                }
            } catch (error) {
                // No hacer nada, ya que esto fallará si estamos offline.
            }
        })();
    </script>
	</body>
</html>

<style>
	html, body {
		margin: 0;
		width: 100%;
		height: 100%;
        background-color: #F5F5F4; 
        font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
	}
</style>
