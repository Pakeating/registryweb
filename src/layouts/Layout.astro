---
import Navbar from '../components/Navbar.astro';

// Original manifest with relative paths
const manifest = {
  name: 'Registro de Comidas',
  short_name: 'Comidas',
  description: 'Una app para registrar comidas y enviarlas a Notion.',
  start_url: '/',
  display: 'standalone',
  scope: '/',
  theme_color: '#F5F5F4',
  background_color: '#F5F5F4',
  icons: [
    {
      src: '/icons/icon-192x192.svg',
      sizes: '192x192',
      type: 'image/svg+xml'
    },
    {
      src: '/icons/icon-512x512.svg',
      sizes: '512x512',
      type: 'image/svg+xml',
      purpose: 'any maskable'
    }
  ]
};

// Create a new manifest with absolute URLs for all relevant properties.
const siteUrl = Astro.url.origin;
const manifestWithAbsoluteUrls = {
  ...manifest,
  start_url: `${siteUrl}${manifest.start_url}`,
  scope: `${siteUrl}${manifest.scope}`,
  icons: manifest.icons.map(icon => ({
    ...icon,
    src: `${siteUrl}${icon.src}`
  }))
};

// Encode the manifest, replacing '#' with its URL-safe equivalent '%23'
const encodedManifest = JSON.stringify(manifestWithAbsoluteUrls).replace(/#/g, '%23');
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>RegistryWeb</title>
    <link rel="manifest" href={`data:application/manifest+json,${encodedManifest}`} />
    <meta name="theme-color" content={manifest.theme_color} />
    <style is:global>
        @import '../styles/global.css';
    </style>
	</head>
	<body>
    <Navbar />
		<slot />
    <script>
        import { registerSW } from 'virtual:pwa-register';
        registerSW({
            onOfflineReady() {
                console.log("La aplicación está lista para funcionar sin conexión.");
            },
        });

        // Health check to "wake up" the serverless backend on page load.
        (async () => {
            try {
                const response = await fetch('/api/notion-proxy');
                if (!response.ok) {
                    console.warn(`Backend health check failed with status: ${response.status}`);
                }
            } catch (error) {
                console.error('Error during backend health check:', error);
            }
        })();
    </script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
        background-color: #F5F5F4; /* stone-100 */
        font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
	}
</style>
