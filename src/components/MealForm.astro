--- 
import LoadingButton from "./LoadingButton.astro";
---

<div class="meal-form">
  <h2 class="title">Registrar Comida</h2>
  <form id="meal-form-element">
    <div class="form-group">
      <label for="meal-name" class="label">Nombre de la comida</label>
      <input
        type="text"
        id="meal-name"
        name="meal-name"
        class="input"
        required
      />
    </div>

    <div class="form-group">
      <label for="meal-time" class="label">Momento del consumo</label>
      <input
        type="datetime-local"
        id="meal-time"
        name="meal-time"
        class="input"
        required
      />
    </div>

    <div class="form-group">
      <label for="meal-type" class="label">Tipo de comida</label>
      <div class="select-wrapper">
        <select id="meal-type" name="meal-type" class="select">
          <option>Comida planificada</option>
          <option>Picoteo</option>
          <option>Picoteo Social</option>
        </select>
      </div>
    </div>

    <div class="form-group">
      <label for="description" class="label">Observaciones</label>
      <textarea
        id="description"
        name="description"
        class="textarea"
        placeholder="Ej: Me sentía un poco bajo de energía..."></textarea>
    </div>

    <div class="form-group">
      <LoadingButton id="submit-button" type="submit"> Enviar </LoadingButton>
    </div>
  </form>
</div>

<style>
  /* --- Estilos del formulario (sin cambios) --- */
</style>

<script>
  import { createCommandBody } from "../lib/objects";
  import { getNotionCredentials, checkNotionDB } from "../lib/notionUtils.js";

  const form = document.getElementById("meal-form-element");
  const submitButton = document.getElementById("submit-button");

  // --- Funciones de ayuda para el UI (sin cambios) ---
  function setLoading(isLoading) {
    if (!submitButton) return;
    const textElement = submitButton.querySelector(".button-text");
    const spinnerElement = submitButton.querySelector(".spinner");
    submitButton.disabled = isLoading;
    if (isLoading) {
      textElement.classList.add("hidden");
      spinnerElement.classList.remove("hidden");
    } else {
      textElement.classList.remove("hidden");
      spinnerElement.classList.add("hidden");
    }
  }

  function resetForm() {
    const mealNameInput = document.getElementById("meal-name")
    const dateTimeInput = document.getElementById("meal-time")
    const mealTypeSelect = document.getElementById("meal-type")
    const descriptionInput = document.getElementById("description")

    if (mealNameInput && dateTimeInput && mealTypeSelect) {
      mealNameInput.value = "";
      descriptionInput.value = "";
      const now = new Date();
      const timezoneOffset = now.getTimezoneOffset() * 60000;
      const localISOTime = new Date(now - timezoneOffset).toISOString().slice(0, 16);
      dateTimeInput.value = localISOTime;
      mealTypeSelect.value = "Comida planificada";
    }
  }

  /**
   * Registra una tarea de sincronización para que el SW la procese.
   */
  async function registerBackgroundSync() {
    if ('serviceWorker' in navigator && 'SyncManager' in window) {
      try {
        const swRegistration = await navigator.serviceWorker.ready;
        await swRegistration.sync.register('sync-pending-meals');
        console.log('[MealForm] Tarea de sincronización de fondo registrada.');
      } catch (error) {
        console.error('[MealForm] No se pudo registrar la sincronización de fondo:', error);
      }
    }
  }

  /**
   * Envía los datos del formulario al backend.
   * Si está sin conexión, el Service Worker interceptará la petición.
   */
  async function sendToBack(command) {
    try {
      const response = await fetch("/api/proxy", {
        method: "POST", // IMPORTANTE: Usamos POST para que el SW lo intercepte
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(command),
      });

      if (response.status === 202) {
        alert("Estás sin conexión. Tu comida se ha guardado y se enviará cuando recuperes la conexión.");
        resetForm();
        return; 
      }
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Error del backend: ${errorData.message || 'Error desconocido'}`);
      }

      alert("¡Comida registrada con éxito!");
      resetForm();

    } catch (error) {
      throw error;
    }
  }

  // --- Event Listener Principal ---
  form.addEventListener("submit", async (event) => {
    event.preventDefault();
    
    // ... (código del feedback visual sin cambios) ...
    let feedbackType = "";
    let mealType = document.getElementById("meal-type").value;
    if (mealType === "Comida planificada") feedbackType = "success";
    else if (mealType === "Picoteo" || mealType === "Picoteo Social") feedbackType = "error";
    if (feedbackType) document.dispatchEvent(new CustomEvent("show-feedback", { detail: { type: feedbackType } }));

    setLoading(true);

    try {
      const { apiKey, dbName } = await getNotionCredentials();
      const dbId = await checkNotionDB(dbName, apiKey);
      
      const commandRequest = createCommandBody();
      commandRequest.parameters.apiKey = apiKey;
      commandRequest.parameters.dbId = dbId;
      commandRequest.body.mealName = document.getElementById("meal-name").value;
      commandRequest.body.mealTime = new Date(document.getElementById("meal-time").value).toISOString();
      commandRequest.body.mealType = mealType;
      commandRequest.body.mealDescription = document.getElementById("description").value;
      commandRequest.body.mealAudit = new Date().toISOString();

      // Envía la petición (con lógica offline)
      await sendToBack(commandRequest);
      
      // Pide al SW que intente sincronizar por si acaso.
      await registerBackgroundSync();

    } catch (error) {
      console.error("Error durante el registro:", error);
      alert(`Error: ${error.message}`);
    } finally {
      setLoading(false);
    }
  });

  document.addEventListener("DOMContentLoaded", resetForm);
</script>
