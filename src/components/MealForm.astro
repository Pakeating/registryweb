---
import LoadingButton from './LoadingButton.astro';
---
<div class="meal-form">
  <h2 class="title">Registrar Comida</h2>
  <form id="meal-form-element">
    <div class="form-group">
      <label for="meal-name" class="label">Nombre de la comida</label>
      <input type="text" id="meal-name" name="meal-name" class="input" required>
    </div>

    <div class="form-group">
      <label for="meal-time" class="label">Momento del consumo</label>
      <input type="datetime-local" id="meal-time" name="meal-time" class="input" required>
    </div>

    <div class="form-group">
      <label for="meal-type" class="label">Tipo de comida</label>
      <div class="select-wrapper">
        <select id="meal-type" name="meal-type" class="select">
          <option>Comida planificada</option>
          <option>Picoteo</option>
          <option>Picoteo Social</option>
        </select>
      </div>
    </div>

    <div class="form-actions">
        <LoadingButton id="submit-button" type="submit">
            Enviar
        </LoadingButton>
    </div>
  </form>
</div>

<style>
  :root {
    --primary-color: #F5F5F4;
    --secondary-color: #FFFFFF;
    --accent-color: #3B82F6;
    --text-primary-color: #1C1917;
    --text-secondary-color: #44403C;
    --border-color: #D6D3D1;
  }

  .meal-form {
    background-color: var(--secondary-color);
    padding: 2rem;
    border-radius: 0.75rem;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    max-width: 28rem;
    width: 100%;
    margin: 0 auto;
    border: 1px solid var(--border-color);
    box-sizing: border-box;
  }

  .title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    color: var(--text-primary-color);
    text-align: center;
  }

  .form-group {
    margin-bottom: 1.25rem;
  }

  .label {
    display: block;
    color: var(--text-secondary-color);
    font-size: 0.875rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .input,
  .select {
    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    width: 100%;
    padding: 0.75rem;
    font-size: 1rem;
    color: var(--text-secondary-color);
    line-height: 1.5;
    background-color: var(--secondary-color);
    appearance: none;
    box-sizing: border-box;
  }

  input[type="datetime-local"] {
    -webkit-appearance: textfield;
    -moz-appearance: textfield;
    appearance: textfield;
    min-height: 2.5rem;
  }

  .input:focus,
  .select:focus {
    outline: 2px solid var(--accent-color);
    outline-offset: 2px;
  }

  .select-wrapper {
    position: relative;
  }

  .select-wrapper::after {
    content: '\25BC';
    position: absolute;
    top: 50%;
    right: 1rem;
    transform: translateY(-50%);
    pointer-events: none;
    color: var(--text-secondary-color);
  }

  .form-actions {
    display: flex;
    margin-top: 2rem;
  }
  
  /* Los estilos del botón y el spinner se han movido a LoadingButton.astro */

  @media (min-width: 640px) {
    .meal-form {
      max-width: 42rem;
      padding: 2.5rem;
    }
    .title { font-size: 1.875rem; }
    .label { font-size: 1rem; }
  }

</style>

<script>
    import { auth } from "../firebase/config";
    import { onAuthStateChanged } from 'firebase/auth';
    import { openDB, getUserDataFromDb, forceRefreshUserData } from "../lib/auth";

    let currentUser = null;

    function resetForm() {
        const mealNameInput = document.getElementById('meal-name') as HTMLInputElement;
        const dateTimeInput = document.getElementById('meal-time') as HTMLInputElement;
        const mealTypeSelect = document.getElementById('meal-type') as HTMLSelectElement;

        if (mealNameInput && dateTimeInput && mealTypeSelect) {
            mealNameInput.value = '';
            const now = new Date();
            const timezoneOffset = now.getTimezoneOffset() * 60000;
            const localISOTime = new Date(now - timezoneOffset).toISOString().slice(0, 16);
            dateTimeInput.value = localISOTime;
            mealTypeSelect.value = 'Comida planificada';
        }
    }

    onAuthStateChanged(auth, (user) => {
        currentUser = user;
    });

    document.addEventListener('DOMContentLoaded', () => {
        resetForm();

        const form = document.getElementById('meal-form-element');
        const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
        const buttonText = submitButton.querySelector('.button-text') as HTMLElement;
        const spinner = submitButton.querySelector('.spinner') as HTMLElement;

        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            submitButton.disabled = true;
            buttonText.classList.add('hidden');
            spinner.classList.remove('hidden');

            try {
                if (!currentUser) {
                    alert("Debes iniciar sesión para registrar una comida.");
                    return;
                }

                const mealData = {
                    mealName: (document.getElementById('meal-name') as HTMLInputElement).value,
                    mealTime: (document.getElementById('meal-time') as HTMLInputElement).value,
                    mealType: (document.getElementById('meal-type') as HTMLSelectElement).value,
                    audit: new Date().toISOString()
                };

                const notionProperties = buildNotionProperties(mealData);
                const localDb = await openDB();
                const userData = await getUserDataFromDb(localDb, currentUser.uid);

                let apiKey = userData?.notion_api_key;

                if (!apiKey) {
                    console.error("Notion API key not found. Forcing refresh.");
                    const refreshedData = await forceRefreshUserData(currentUser.uid);
                    apiKey = refreshedData?.notion_api_key;
                }
                
                if (apiKey) {
                    await sendToNotion(notionProperties, apiKey);
                } else {
                    alert("Error: La clave de la API de Notion no está configurada. Por favor, guárdala en tu perfil.");
                }

            } catch (error) {
                console.error('Error submitting form:', error);
                alert('Hubo un error inesperado al procesar tu solicitud.');
            } finally {
                submitButton.disabled = false;
                buttonText.classList.remove('hidden');
                spinner.classList.add('hidden');
            }
        });
    });

    function buildNotionProperties(mealData) {
        return {
            'Nombre': { title: [{ text: { content: mealData.mealName } }] },
            'Fecha de Consumo': { date: { start: mealData.mealTime } },
            'Categoria de Comida': { select: { name: mealData.mealType } },
            'Fecha de Registro': { date: { start: mealData.audit } }
        };
    }

    async function sendToNotion(properties, apiKey, isRetry = false) {
        const dbName = "Registro Comidas";
        let databaseId = null;
        let proxyResponse;

        try {
            proxyResponse = await fetch(`/api/notion-proxy`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    endpoint: 'search',
                    notionApiKey: apiKey, 
                    body: { query: dbName, filter: { value: 'database', property: 'object' } }
                })
            });
            
            if (proxyResponse.status === 401 && !isRetry) {
                console.warn("API Key no autorizada. Refrescando datos y reintentando...");
                const refreshedData = await forceRefreshUserData(currentUser.uid);
                if (refreshedData && refreshedData.notion_api_key) {
                    await sendToNotion(properties, refreshedData.notion_api_key, true);
                } else {
                    throw new Error("La clave de API refrescada sigue sin ser válida o no se encontró.");
                }
                return;
            }

            if (!proxyResponse.ok) {
                const errorData = await proxyResponse.json();
                throw new Error(errorData.message || `Error encontrando la base de datos: ${proxyResponse.statusText}`);
            }

            const searchData = await proxyResponse.json();
            if (searchData.results.length > 0) {
                databaseId = searchData.results[0].id;
            } else {
                throw new Error(`La base de datos "${dbName}" no se encontró o la integración no tiene acceso a ella.`);
            }
        } catch (error) {
            console.error(error);
            alert(`Error de Notion: ${error.message}`);
            throw error; 
        }

        const pageRequestBody = {
            parent: { database_id: databaseId },
            properties: properties
        };

        try {
            proxyResponse = await fetch(`/api/notion-proxy`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    endpoint: 'pages',
                    notionApiKey: apiKey, 
                    body: pageRequestBody
                })
            });

            if (!proxyResponse.ok) {
                const errorData = await proxyResponse.json();
                throw new Error(errorData.message || `Error creando la página: ${proxyResponse.statusText}`);
            }
            
            alert("¡Comida registrada con éxito en Notion!");
            resetForm();

        } catch (error) {
            console.error(error);
            alert(`Error de Notion: ${error.message}`);
            throw error;
        }
    }
</script>
