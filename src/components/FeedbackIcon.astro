---
// src/components/FeedbackIcon.astro
const ANIMATION_DURATION_MS = 800;
---

<div id="feedback-container" class="feedback-container">
    <div id="feedback-success-icon" class="icon hidden">
        <!-- Happy Face SVG -->
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M8 14s1.5 2 4 2 4-2 4-2"></path>
            <line x1="9" y1="9" x2="9.01" y2="9"></line>
            <line x1="15" y1="9" x2="15.01" y2="9"></line>
        </svg>
    </div>
    <div id="feedback-error-icon" class="icon hidden">
        <!-- Sad Face SVG -->
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M16 16s-1.5-2-4-2-4 2-4 2"></path>
            <line x1="9" y1="9" x2="9.01" y2="9"></line>
            <line x1="15" y1="9" x2="15.01" y2="9"></line>
        </svg>
    </div>
</div>

<style define:vars={{ animationDuration: `${ANIMATION_DURATION_MS}ms` }}>
    .feedback-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        display: none; /* Oculto por defecto */
        justify-content: center;
        align-items: center;
        width: 150px;
        height: 150px;
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 50%;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
        pointer-events: none; /* No interceptar clics */
        transition: background-color 0.2s ease-in-out;
    }

    .feedback-container.success {
        background-color: #16A34A; /* Verde Éxito */
    }

    .feedback-container.error {
        background-color: #DC2626; /* Rojo Error */
    }

    .feedback-container.visible {
        display: flex;
        animation: feedback-anim var(--animationDuration) ease-in-out forwards;
    }

    .icon {
        transform: scale(2);
        color: #FFFFFF; /* Iconos blancos para contraste */
    }

    .hidden {
        display: none;
    }

    @keyframes feedback-anim {
        0% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.3);
        }
        50% {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }
        100% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.9);
        }
    }
</style>

<script define:vars={{ animationDuration: 1000 }}>
    document.addEventListener('show-feedback', (event) => {
        const type = event.detail?.type;
        
        const container = document.getElementById('feedback-container');
        const successIcon = document.getElementById('feedback-success-icon');
        const errorIcon = document.getElementById('feedback-error-icon');

        if (!container || !successIcon || !errorIcon) {
            return;
        }

        // 1. Resetear clases
        container.classList.remove('visible', 'success', 'error');
        successIcon.classList.add('hidden');
        errorIcon.classList.add('hidden');

        // 2. Configurar el tipo de feedback
        if (type === 'success') {
            successIcon.classList.remove('hidden');
            container.classList.add('success');
        } else if (type === 'error') {
            errorIcon.classList.remove('hidden');
            container.classList.add('error');
        } else {
            return; // Tipo no válido
        }

        // 3. Forzar reflow y mostrar
        void container.offsetWidth;
        container.classList.add('visible');
        
        // 4. Limpiar la clase 'visible' después de la animación
        setTimeout(() => {
            container.classList.remove('visible');
        }, animationDuration);
    });
</script>
